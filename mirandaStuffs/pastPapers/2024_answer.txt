/* cSpell:disable */

|| paper 2024


|| paper 2024 Q2 (version 2)

|| First part

|| define suit, number and card as algebraic types and type synonym
suit ::= Spades | Hearts | Clubs | Diamonds
number ::= Two | Three | Four | Five | Six | Seven | Eight | Nine | Ten | Jack | Queen | King | Ace
card == (number, suit)


|| shuffle take as arguments a num, list of cards and a function checking if two cards are the same
|| it returns a card list with shuffled order
|| the function returns an empty list if the input cardlist is empty
|| it has two different ways to shuffle a cardlist, depending on the number of cards is odd or even
|| it throws errors when number of card is more than 52 or when there is an duplicated card
shuffle :: num -> [card] -> (card -> card -> bool) -> [card]
|| if card list is empty
shuffle n [] fcd = []
|| if card list is not empty
|| fcd (function for checking duplicated) is the input function which check if two cards are identical
shuffle n cardlist fcd
  || if number of cards > 52
  = error "Number of cards is more than 52", if length > 52
  || if duplicated cards are found
  = error "There is duplicated card in the input list", if checkduplicate cardlist fcd = True
  || if number of cards is even, do evenshuffle
  = evenshuffle n cardlist, if length mod 2 = 0
  || if number of cards is odd, do oddshuffle
  = oddshuffle n cardlist, otherwise
    where
    checkduplicate [] fcd = False  || if no card in the list, meaning that all the cards are unique
    checkduplicate (x : xs) fcd
      || use filter to return a list of cards that is the same as the first card
      || if the cardlist after filtering is empty, the first card is unique, then check the second card
      || check each card recursively until no card is left
      = checkduplicate xs fcd, if (filter (fcd x) xs) = []
      || if the filtered cardlist is not empty, there is duplicated card
      = True, otherwise

    || function to shuffle even number of cards
    || if number of shuffle is 0, return the cardlist
    evenshuffle 0 cl = cl
    || swap and interleave cardlist, and reduce num of shuffle by 1
    evenshuffle n cl = evenshuffle (n-1) (evenswapinsert (evensplithalf cl))
    || put the previous top card into the second place
    || and swap the two half
    evenswapinsert ((x: xs), (y: ys)) = [y] ++ [x] ++ ys ++ xs
    || split the cards into two half
    evensplithalf cl = (take halflength cl, drop halflength cl)

    || function to shuffle odd number of cards
    || if number of shuffle is 0, return the cardlist
    oddshuffle 0 cl = cl
    || swap and interleave cardlist, and reduce num of shuffle by 1
    oddshuffle n cl = oddshuffle (n-1) (oddswapinsert (oddsplithalf cl))
    || put the previous top card into the second place
    || swap the two half, and put the previous middle card into the end
    oddswapinsert ((x: xs), (y: ys), z) = [y] ++ [x] ++ ys ++ xs ++ [z]
    || split the cards into two half and isolate the middle card
    oddsplithalf cl = (take halflength cl, drop (halflength+1) cl, cl ! halflength)

    length = # cardlist  || length of the input cardlist
    halflength = (# cardlist) div 2 || half of the length of the input cardlist


|| function to check if two cards are identical
|| it takes two cards as argument, return True if they are the same
isduplicate :: card -> card -> bool
isduplicate (x, y) (x, y) = True  || if both suit and number are the same, return true
isduplicate card1 card2 = False   || otherwise return false


|| Second part

|| function "draw and compare" take a number as argument.
|| where the number indicates the number of times to shuffle the card deck by shuffle function
|| it return the best hand if one is winning according to the rules
|| otherwise it returns empty list
drawandcompare :: num -> [card]
drawandcompare n
  || first shuffle the carddeck, then dealfourhands and determine the best hand
  = determinebesthand (dealfourhands (shuffle n carddesk isduplicate))
    where
    || dealfourhands return a 2D cardlist i.e. [[card]], with each of the sublist representing a hand
    dealfourhands shuffledcardlist 
      = xdealhands 20 [[], [], [], []] shuffledcardlist  || deal 20 cards in totol
        where 
        xdealhands 0 [a, b, c, d] xs = [a, b, c, d]
        xdealhands n [a, b, c, d] (x : xs)  || dead cards to 4 players with turns
          = xdealhands (n-1) [a ++ [x], b, c, d] xs, if n mod 4 = 0
          = xdealhands (n-1) [a, b ++ [x], c, d] xs, if n mod 4 = 3
          = xdealhands (n-1) [a, b, c ++ [x], d] xs, if n mod 4 = 2
          = xdealhands (n-1) [a, b, c, d ++ [x]] xs, if n mod 4 = 1

    || initial carddesk
    carddesk = [(Two, Spades), (Three, Spades), (Four, Spades), (Five, Spades), 
                (Six, Spades), (Seven, Spades), (Eight, Spades), (Nine, Spades), 
                (Ten, Spades), (Jack, Spades), (Queen, Spades), (King, Spades), 
                (Ace, Spades), (Two, Hearts), (Three, Hearts), (Four, Hearts), 
                (Five, Hearts), (Six, Hearts), (Seven, Hearts), (Eight, Hearts), 
                (Nine, Hearts), (Ten, Hearts), (Jack, Hearts), (Queen, Hearts), 
                (King, Hearts), (Ace, Hearts), (Two, Clubs), (Three, Clubs), 
                (Four, Clubs), (Five, Clubs), (Six, Clubs), (Seven, Clubs), 
                (Eight, Clubs), (Nine, Clubs), (Ten, Clubs), (Jack, Clubs), 
                (Queen, Clubs), (King, Clubs), (Ace, Clubs), (Two, Diamonds), 
                (Three, Diamonds), (Four, Diamonds), (Five, Diamonds), (Six, Diamonds), 
                (Seven, Diamonds), (Eight, Diamonds), (Nine, Diamonds), (Ten, Diamonds), 
                (Jack, Diamonds), (Queen, Diamonds), (King, Diamonds), (Ace, Diamonds)]

|| determinebesthand take a [[card]] as argument and it returns the one of the [card] with winning hand
|| the input [[card]] is first passed into a function called getbesthandposition
|| the index indicating which hand is winning is returned
|| showwinninghand then takes the input [[card]] and the index, and display the winning hand in the format
|| [card, card, card, card, card]
determinebesthand :: [[card]] -> [card]
determinebesthand fourhands 
  = showwinninghand fourhands (getbesthandposition fourhands)
    where
    showwinninghand fourhands n = fourhands ! n, if n >= 0 & n < 4
    showwinninghand fourhands n = [], otherwise  || return empty list if best hand pos = -1
    || getbesthandposition return the pos of the best hand, -1 if no winning hand
    getbesthandposition [a, b, c, d]
      || convert all the cards to format (num, num)
      || then put it into checkpipeline to compute its rank score
      || return the pos of the best hand (the hand with highest rank score)
      = getpos (map checkpipeline (map convertcardtonum [a, b, c, d]))  
        where
        || if all four hands have score (0, 0, 0), no hand is winning
        getpos [a, b, c, d] = -1, if max [a, b, c, d] = a & a = (0, 0, 0)
        getpos [a, b, c, d] = 0, if max [a, b, c, d] = a
        getpos [a, b, c, d] = 1, if max [a, b, c, d] = b
        getpos [a, b, c, d] = 2, if max [a, b, c, d] = c
        getpos [a, b, c, d] = 3, if max [a, b, c, d] = d

|| check whether a hand has straight flush, four of a kind and other pattern
|| return a score (a, b, c) indicating its cards pattern
|| where the first score represent its rank (straight flush=4, four of a kind = 3, etc) 
|| second score is the highest critical value used to compare hands with same rank
|| (e.g. when comparing 2 hands of "four of a kind")
|| e.g. full house 3 Kings and 2 Jacks -> 13
|| third score record the suit of straight flush
|| example: Spades royal flush -> (4, 14, 4), Hearts royal flush -> (4, 14, 3)
checkpipeline :: [(num, num)] -> (num, num, num)
|| sort the five cards first, then run checks
checkpipeline myhand 
  = (extractscore.isstraightflush.isfourkind.isfullhouse.isflush) ((sort myhand), (0, 0, 0))
    where
    isflush ([(n1, samesuit), (n2, samesuit), (n3, samesuit), (n4, samesuit), (n5, samesuit)], score)
      = ([(n1, samesuit), (n2, samesuit), (n3, samesuit), (n4, samesuit), (n5, samesuit)], (1, max [n1, n2, n3, n4, n5], 0))
    isflush any
      = any
    isfullhouse ([(n1, suit1), (n1, suit2), (n1, suit3), (n2, suit4), (n2, suit5)], score)
      = ([(n1, suit1), (n1, suit2), (n1, suit3), (n2, suit4), (n2, suit5)], (2, n1, 0))
    isfullhouse ([(n1, suit1), (n1, suit2), (n2, suit3), (n2, suit4), (n2, suit5)], score)
      = ([(n1, suit1), (n1, suit2), (n1, suit3), (n2, suit4), (n2, suit5)], (2, n2, 0))
    isfullhouse any
      = any
    isfourkind ([(n1, suit1), (n1, suit2), (n1, suit3), (n1, suit4), (n2, suit5)], score)
      = ([(n1, suit1), (n1, suit2), (n1, suit3), (n1, suit4), (n2, suit5)], (3, n1, 0))
    isfourkind ([(n1, suit1), (n2, suit2), (n2, suit3), (n2, suit4), (n2, suit5)], score)
      = ([(n1, suit1), (n1, suit2), (n1, suit3), (n1, suit4), (n2, suit5)], (3, n2, 0))
    isfourkind any
      = any
    isstraightflush ([(n, samesuit), (n+1, samesuit), (n+2, samesuit), (n+3, samesuit), (n+4, samesuit)], score)
      = ([(n, samesuit), (n+1, samesuit), (n+2, samesuit), (n+3, samesuit), (n+4, samesuit)], (4, n+4, samesuit))
    isstraightflush any
      = any
    extractscore (a, b) = b

|| convert a list of card to a list of (num, num), so that we can use built-in function `sort`
|| card number is converted into range [2, 14], where 11 is Jack, 12 is Queen, 13 is King and 14 is Ace
|| card suit is converted into range [1, 4], where 4 is Spades, 3 is Hearts, 2 is Diamonds, 1 is Clubs
convertcardtonum :: [card] -> [(num, num)]
convertcardtonum cardlist = map (convertnum.convertsuit) cardlist
                            where 
                            convertnum (n, s) = (2, s), if n = Two
                                              = (3, s), if n = Three
                                              = (4, s), if n = Four
                                              = (5, s), if n = Five
                                              = (6, s), if n = Six
                                              = (7, s), if n = Seven
                                              = (8, s), if n = Eight
                                              = (9, s), if n = Nine
                                              = (10, s), if n = Ten
                                              = (11, s), if n = Jack
                                              = (12, s), if n = Queen
                                              = (13, s), if n = King
                                              = (14, s), if n = Ace
                            convertsuit (n, s) = (n, 1), if s = Clubs
                                               = (n, 2), if s = Diamonds
                                               = (n, 3), if s = Hearts
                                               = (n, 4), if s = Spades


|| data for testing

|| drawandcompare 10
|| --> []

|| determinebesthand [[(Ten, Hearts), (Jack, Hearts), (Queen, Hearts), (King, Hearts), (Ace, Hearts)], [(Ace, Spades), (Ace, Hearts), (Ace, Clubs), (Ace, Diamonds), (Seven, Hearts)], [(Two, Spades), (Two, Hearts), (Two, Clubs), (Three, Diamonds), (Three, Spades)], [(Six, Diamonds), (Nine, Diamonds), (Jack, Diamonds), (Three, Diamonds), (King, Diamonds)]]
|| --> [(Ten, Hearts), (Jack, Hearts), (Queen, Hearts), (King, Hearts), (Ace, Hearts)]
|| determinebesthand [[(King, Spades), (King, Hearts), (King, Clubs), (King, Diamonds), (Seven, Diamonds)], [(Ace, Spades), (Ace, Hearts), (Ace, Clubs), (Ace, Diamonds), (Seven, Hearts)], [(Two, Spades), (Two, Hearts), (Two, Clubs), (Three, Diamonds), (Three, Spades)], [(Six, Diamonds), (Nine, Diamonds), (Jack, Diamonds), (Three, Diamonds), (King, Diamonds)]]
|| --> [(Ace, Spades), (Ace, Hearts), (Ace, Clubs), (Ace, Diamonds), (Seven, Hearts)]

|| checkpipeline [(1, 1),(2, 1),(3, 1),(4, 1),(5, 1)]

|| convertcardtonum [(Ace, Hearts), (Ace, Hearts), (Three, Diamonds), (Four, Clubs)]

|| shuffle 5 [(Two, Hearts), (Three, Spades), (Four, Diamonds), (Five, Clubs), (Six, Hearts), (Seven, Hearts)] isduplicate
|| shuffle 3 [(Ace, Hearts), (Two, Hearts), (Ace, Diamonds), (Four, Clubs), (Three, Hearts)] isduplicate
|| shuffle 2 [(Ace, Hearts), (Ace, Hearts), (Three, Diamonds), (Four, Clubs)] isduplicate
