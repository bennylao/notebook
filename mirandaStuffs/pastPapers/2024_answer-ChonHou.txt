||/* cSpell:disable */

|| paper 2024

|| Q1 C

t_graph * ::= Emptygraph | Node * [t_graph *]

glist :: [t_graph char]
glist = [Node 'A' [glist!2, glist!1],
         Node 'B' [glist!3],
         Node 'C' [glist!0, glist!3],
         Node 'D' []
        ]

graph :: t_graph char
graph = hd glist

printgraph :: t_graph char -> [char]
printgraph Emptygraph = "empty"
printgraph (Node mychar []) = "Node " ++ [mychar] ++ " empty"
printgraph (Node mychar sublist) 
 = "Node " ++ [mychar] ++ " [ " ++
   (xprint sublist [mychar]) ++ " ]"

   where 
   xprint [Emptygraph] seenlist = "empty"
   xprint [(Node mychar [])] seenlist = "Node " ++ [mychar] ++ " empty"
   xprint [(Node mychar sublist)] seenlist = "Node " ++ [mychar] ++ " seen", if member seenlist mychar
   xprint [(Node mychar sublist)] seenlist 
   = "Node " ++ [mychar] ++ " [ " ++
     (xprint sublist (mychar : seenlist)) ++ " ]"

   xprint (Emptygraph: rest) seenlist = "empty, " ++ (xprint rest seenlist)
   xprint ((Node mychar []) : rest) seenlist 
   = "Node " ++ [mychar] ++ " empty, " ++ (xprint rest (mychar : seenlist))
   xprint ((Node mychar sublist) : rest) seenlist 
   = "Node " ++ [mychar] ++ " seen, " ++ (xprint rest (mychar : seenlist)), if member seenlist mychar
   = "Node " ++ [mychar] ++ " [ " ++ (xprint sublist (mychar : seenlist)) ++ " ]," ++ 
     (xprint rest (mychar : (updatelist sublist seenlist))), otherwise

   updatelist [] seenlist = seenlist
   updatelist (Emptygraph : rest) seenlist = updatelist rest seenlist
   updatelist ((Node mychar []) : rest) seenlist = updatelist rest (mychar : seenlist)
   updatelist ((Node mychar sublist) : rest) seenlist
    = updatelist rest seenlist, if member seenlist mychar
    = updatelist rest (updatelist sublist (mychar : seenlist)), otherwise


|| Q2

|| First part

|| CDC - You should include a block of comments to introduce your program


suit ::= Spades | Hearts | Clubs | Diamonds
number ::= Two | Three | Four | Five | Six | Seven | Eight | Nine | Ten | Jack | Queen | King | Ace
card == (number, suit)

|| CDC - try to layout your code so that it looks pretty in "portrait"
|| layout, not "landscape" layout.  For example you could write:
|| number ::= Two   | Three | Four | Five | Six  |
||            Seven | Eight | Nine | Ten  | Jack |
||            Queen | King  | Ace

|| CDC - You should have  block of comments at the start of each 
|| top-level function

shuffle :: num -> [card] -> (card -> card -> bool) -> [card]
|| if card list is empty
shuffle n [] fcd = []
|| if card list is not empty
|| fcd is the function which check if two cards are identical
shuffle n cardlist fcd
  = error "Number of cards is more than 52", if length > 52
  = error "There is duplicated card in the input list", if checkduplicate cardlist fcd = True

|| CDC - it's bad style to write    if something = True
|| you should just write            if something

  = evenshuffle n cardlist, if length mod 2 = 0  || if number of cards is even, do evenshuffle

|| CDC - the above comment is (almost) redundant (& the line's too long)

  = oddshuffle n cardlist, otherwise  || if number of cards is odd, do oddshuffle

|| CDC - ditto

    where
    checkduplicate [] fcd = False  || if no card in the list, meaning that all the cards are unique
    checkduplicate (x : xs) fcd
      || use filter to return a list of cards that is the same as the first card
      || if the cardlist after filtering is empty, the first card is unique, then check the second card
      = checkduplicate xs fcd, if (filter (fcd x) xs) = []
      || if the filtered cardlist is not empty, there is duplicated card
      = True, otherwise

    || if number of shuffle is 0, return the cardlist
    evenshuffle 0 cl = cl
    || split and interleave cardlist, and reduce num of shuffle by 1
    evenshuffle n cl = evenshuffle (n-1) (eveninterleave (evensplithalf cl))
    || interleave the two halfs
    eveninterleave ((x: xs), (y: ys)) = [y] ++ [x] ++ (eveninterleave (xs, ys))
    eveninterleave ([], [])           = []
    || split the cards into two half
    evensplithalf cl = (take halflength cl, drop halflength cl)

    || if number of shuffle is 0, return the cardlist
    oddshuffle 0 cl = cl
    || split and interleave cardlist, and reduce num of shuffle by 1
    oddshuffle n cl = oddshuffle (n-1) (oddinterleave (oddsplithalf cl))
    || interleave the two half, and put the previous middle card into the first place
    oddinterleave (xs, ys, z) = [z] ++ (eveninterleave (xs, ys))
    || split the cards into two half and isolate the middle card
    oddsplithalf cl = (take halflength cl, drop (halflength+1) cl, cl ! halflength)

|| CDC - there is a problem with the above code:
||     your "even" code is remarkably similar to your "odd" code and 
||     you should be asking yourself if you can simplify this.  
||     If you do interleave all the way through the deck, then 
||     it turns out that there's an easy way to resolve what to
||     do if you have an odd number of cards in the deck - and 
||     it takes very little extra computational resource 
||     (it's very efficient).
||
||     Assume you have a function "shuffle" that shuffles once.
||     Then for multiples shuffles you just write:
||     shuffles :: num -> [card] -> (card->card->bool) -> [card]
||     shuffles 0 deck p = deck
||     shuffles n deck p = shuffles (n-1) (shuffle deck p) p
||
||     Now define shuffle
||     shuffle :: [card] -> (card->card->bool) -> [card]
||     shuffle deck p 
||       = error "deck too big", if decklength > 52
||       = error "duplicates", if checkduplicate deck p
||       = interleave top bottom, otherwise
||         where
||         decklength = #deck 
||         halflength = decklength div 2 
||         top        = take halflength deck
||         bottom     = drop halflength deck
||
||     The code uses your definition of checkduplicate
||
||     And let interleave do the remaining work
||     interleave :: [card] -> [card] -> [card]
||     interleave []     ys     = [] || uneven excess discarded
||     interleave xs     []     = [] || uneven excess discarded
||     interleave (x:xs) (y:ys) 
||       = (y: (x: (interleave xs ys)))
||
||  (PS: I haven't tested my code - apologies if there are any bugs,
||       but it's the basic structure that's important here)

    length = # cardlist  || length of the input cardlist
    halflength = (# cardlist) div 2 || half of the length of the input cardlist

isduplicate :: card -> card -> bool
isduplicate (x, y) (x, y) = True  || if both suit and number are the same, return true
isduplicate card1 card2 = False   || otherwise return false


|| Second part

|| CDC - I found it difficult to read the following code because
|| the code lines are too long.  I'll try to reformat them as I 
|| read again.

|| function "draw and compare" take a number as argument.
|| where the number indicates the number of times to shuffle the 
|| card deck by shuffle function it return the best hand if one 
|| is winning according to the rules otherwise it return empty list

drawandcompare :: num -> [card]
drawandcompare n 
  = determinebesthand (dealfourhands (shuffle n carddesk isduplicate))  
    || first shuffle the carddeck, then dealfourhands and determine 
    || the best hand
    where
    dealfourhands shuffledcardlist 
      = xdealhands 20 [[], [], [], []] shuffledcardlist  
        || deal 20 cards in totol
        where 
        xdealhands 0 [a, b, c, d] xs = [a, b, c, d]
        xdealhands n [a, b, c, d] (x : xs)  || dead cards to 4 players
          = xdealhands (n-1) [a ++ [x], b, c, d] xs, if n mod 4 = 0
          = xdealhands (n-1) [a, b ++ [x], c, d] xs, if n mod 4 = 3
          = xdealhands (n-1) [a, b, c ++ [x], d] xs, if n mod 4 = 2
          = xdealhands (n-1) [a, b, c, d ++ [x]] xs, if n mod 4 = 1
        ||
        || CDC - yes that works, but you could do the following
        || (with more error checking):
        || xdealhands 0 [a,b,c,d] xs = [a,b,c,d]
        || xdealhands n [a,b,c,d] (x1:(x2:(x3:(x4:xs)))) 
        ||   = xdealhands (n-4) [x1:a, x2:b, x3:c,x4:d] xs, if n>=4
        ||   = error "xdealhands: bad n", otherwise
        || xdealhands n any1 any2 = error "xdealhands: bad arg"

    || initial carddesk
    carddesk = [(Two, Spades),     (Three, Spades),   (Four, Spades), 
                (Five, Spades),    (Six, Spades),     (Seven, Spades), 
                (Eight, Spades),   (Nine, Spades),    (Ten, Spades), 
                (Jack, Spades),    (Queen, Spades),   (King, Spades), 
                (Ace, Spades),     (Two, Hearts),     (Three, Hearts), 
                (Four, Hearts),    (Five, Hearts),    (Six, Hearts), 
                (Seven, Hearts),   (Eight, Hearts),   (Nine, Hearts), 
                (Ten, Hearts),     (Jack, Hearts),    (Queen, Hearts), 
                (King, Hearts),    (Ace, Hearts),     (Two, Clubs), 
                (Three, Clubs),    (Four, Clubs),     (Five, Clubs), 
                (Six, Clubs),      (Seven, Clubs),    (Eight, Clubs), 
                (Nine, Clubs),     (Ten, Clubs),      (Jack, Clubs), 
                (Queen, Clubs),    (King, Clubs),     (Ace, Clubs), 
                (Two, Diamonds),   (Three, Diamonds), (Four, Diamonds), 
                (Five, Diamonds),  (Six, Diamonds),   (Seven, Diamonds), 
                (Eight, Diamonds), (Nine, Diamonds),  (Ten, Diamonds), 
                (Jack, Diamonds),  (Queen, Diamonds), (King, Diamonds), 
                (Ace, Diamonds)]

|| CDC - it's quicker to write the following:
||
|| carddesk 
||  = [(a,b) | a <- [Two,  Three, Four, Five,  Six,  Seven, Eight,
||                   Nine, Ten,   Jack, Queen, King, Ace];
||             b <- [Spades, Hearts, Clubs, Diamonds]]

|| CDC - you need comments here to introduce the function
determinebesthand :: [[card]] -> [card]
determinebesthand fourhands 
  = showwinninghand fourhands (getbesthandposition fourhands)
    where
    showwinninghand fourhands n = fourhands ! n, if n >= 0 & n < 4
    showwinninghand fourhands n = [], otherwise  
    || return empty list if best hand pos = -1
    ||
    || CDC - it would be better to write the above as
    || showwinninghand fourhands n
    ||   = fourhands ! n, if n >=0 & n < 4
    ||   = [], otherwise || return empty list if best hand pos = -1

    || CDC - it's better to put general comments before the function

    || getbesthandposition returns the pos of the best hand, 
    || OR -1 if no winning hand.
    || It does this as follows:
    || - convert all the cards to format (num, num)
    || - then put it into checkpipeline to compute its rank score
    ||
    || CDC - you should say that rank score is a 3-tuple
    ||
    || - return the pos of the best hand (the hand with highest 
    ||   rank score)
    getbesthandposition [a, b, c, d]   
      = getpos (map checkpipeline (map convertcardtonum [a, b, c, d]))  
    ||
    || CDC - better to write:
    || = getpos (map (checkpipeline.convertcardtonum) [a,b,c,d])
    ||
        where
        getpos [a, b, c, d] = -1, if (max [a, b, c, d] = a) & 
                                     (a = (0, 0, 0))
                              || if all four hands have score (0, 0, 0)
        getpos [a, b, c, d] = 0, if max [a, b, c, d] = a
        getpos [a, b, c, d] = 1, if max [a, b, c, d] = b
        getpos [a, b, c, d] = 2, if max [a, b, c, d] = c
        getpos [a, b, c, d] = 3, if max [a, b, c, d] = d

|| checkpipeline checks whether a hand has straight flush, 
|| four of a kind and other pattern. It returns a score (a, b, c) 
|| indicating its cards pattern where: 
|| - The first score represents its rank (straight flush=4, 
||   four of a kind = 3, etc) 
|| - The second score is the highest critical value used to compare 
||   hands with same rank (e.g. when comparing 2 hands of 
||   "four of a kind") e.g. full house 3 Kings and 2 Jacks -> 13
|| - The third score records the suit of straight flush
|| Examples: Spades royal flush -> (4, 14, 4), 
||           Hearts royal flush -> (4, 14, 3)
|| CDC - once they've been tidied up a bit these comments are quite 
||       good, but it took me some effort which I won't do when marking
||       the exam
checkpipeline :: [(num, num)] -> (num, num, num)
checkpipeline myhand 
  = (extractscore.isstraightflush.isfourkind.isfullhouse.isflush) 
    ((sort myhand), (0, 0, 0))  
    || sort the five cards first, then run checks
    where
    isflush ([(n1, samesuit), (n2, samesuit), 
              (n3, samesuit), (n4, samesuit), (n5, samesuit)], score)
      = ([(n1, samesuit), (n2, samesuit), (n3, samesuit), 
          (n4, samesuit), (n5, samesuit)], 
         (1, max [n1, n2, n3, n4, n5], 0))
    isflush any
      = any
    isfullhouse ([(n1, suit1), (n1, suit2), (n1, suit3), 
                  (n2, suit4), (n2, suit5)], score)
      = ([(n1, suit1), (n1, suit2), (n1, suit3), 
          (n2, suit4), (n2, suit5)], (2, n1, 0))
    isfullhouse ([(n1, suit1), (n1, suit2), (n2, suit3), 
                  (n2, suit4), (n2, suit5)], score)
      = ([(n1, suit1), (n1, suit2), (n1, suit3), (n2, suit4), (n2, suit5)], (2, n2, 0))
    isfullhouse any
      = any
    || CDC - the above function misses the possibility that
    || the hand might be [(n1, suit1), (n2, suit2), (n1, suit1),
    || (n2, suit2), (n1, suit1)] or some other permutation
    || In this case a viable alternative is to use calculation
    || instead of pattern matching. Something like this (not tested):
    || isfullhouse ([a,b,c,d,e],score)
    ||   = ([a,b,c,d,e],(2,leadsuit,0)), if test
    ||   = ([a,b,c,d,e], score), otherwise
    ||     where
    ||     test= (#suits = 2) & (suit1num=3 \/ suit2num=3)
    ||     suits = mkset rawsuits
    ||     rawsuits = map snd [a,b,c,d,e]
    ||     suit1num = #(filter (= (suits!0)) rawsuits)
    ||     suit2num = #(filter (= (suits!1)) rawsuits)
    ||     leadsuit = suits!0, if suit1num > suit2num
    ||              = suits!1, otherwise
    isfourkind ([(n1, suit1), (n1, suit2), (n1, suit3), 
                 (n1, suit4), (n2, suit5)], score)
      = ([(n1, suit1), (n1, suit2), (n1, suit3), 
          (n1, suit4), (n2, suit5)], (3, n1, 0))
    isfourkind ([(n1, suit1), (n2, suit2), (n2, suit3), 
                 (n2, suit4), (n2, suit5)], score)
      = ([(n1, suit1), (n1, suit2), (n1, suit3), 
          (n1, suit4), (n2, suit5)], (3, n2, 0))
    isfourkind any
      = any
    ||
    || CDC - again the above code misses some permutations
    ||
    isstraightflush ([(n, samesuit),   (n+1, samesuit), 
                      (n+2, samesuit), (n+3, samesuit), 
                      (n+4, samesuit)], score)
      = ([(n, samesuit), (n+1, samesuit), (n+2, samesuit), 
          (n+3, samesuit), (n+4, samesuit)], (4, n+4, samesuit))
    isstraightflush any
      = any
    ||
    || CDC - First, as I explained in the lecture (and in the book)
    ||       I prefer students not to use Miranda's "n+1" pattern
    ||       because it can be confusing.  If it is used exactly 
    ||       correctly I won't deduct marks, but I advise against it.
    ||       Second, you have once again missed lots of possible
    ||       permutations
    extractscore (a, b) = b

|| convert a list of card to a list of (num, num), 
|| so that we can use built-in sort
convertcardtonum :: [card] -> [(num, num)]
convertcardtonum cardlist 
  = map (convertnum.convertsuit) cardlist
      where 
      convertnum (n, s) = (2, s), if n = Two
                        = (3, s), if n = Three
                        = (4, s), if n = Four
                        = (5, s), if n = Five
                        = (6, s), if n = Six
                        = (7, s), if n = Seven
                        = (8, s), if n = Eight
                        = (9, s), if n = Nine
                        = (10, s), if n = Ten
                        = (11, s), if n = Jack
                        = (12, s), if n = Queen
                        = (13, s), if n = King
                        = (14, s), if n = Ace
      convertsuit (n, s) = (n, 1), if s = Clubs
                         = (n, 2), if s = Diamonds
                         = (n, 3), if s = Hearts
                         = (n, 4), if s = Spades


|| data for testing

|| drawandcompare 10
|| --> []

|| determinebesthand [[(Ten, Hearts), (Jack, Hearts), 
||                     (Queen, Hearts), (King, Hearts), 
||                     (Ace, Hearts)], 
||                    [(Ace, Spades), (Ace, Hearts), (Ace, Clubs), 
||                     (Ace, Diamonds), (Seven, Hearts)], 
||                    [(Two, Spades), (Two, Hearts), (Two, Clubs), 
||                     (Three, Diamonds), (Three, Spades)], 
||                    [(Six, Diamonds), (Nine, Diamonds), 
||                     (Jack, Diamonds), (Three, Diamonds), 
||                     (King, Diamonds)]]
|| --> [(Ten, Hearts), (Jack, Hearts), (Queen, Hearts), 
||      (King, Hearts), (Ace, Hearts)]
|| determinebesthand [[(King, Spades), (King, Hearts), 
||                     (King, Clubs), (King, Diamonds), 
||                     (Seven, Diamonds)], 
||                    [(Ace, Spades), (Ace, Hearts), (Ace, Clubs), 
||                     (Ace, Diamonds), (Seven, Hearts)], 
||                    [(Two, Spades), (Two, Hearts), (Two, Clubs), 
||                     (Three, Diamonds), (Three, Spades)], 
||                    [(Six, Diamonds), (Nine, Diamonds), 
||                     (Jack, Diamonds), (Three, Diamonds), 
||                     (King, Diamonds)]]
|| --> [(Ace, Spades), (Ace, Hearts), (Ace, Clubs), (Ace, Diamonds), 
||      (Seven, Hearts)]

|| checkpipeline [(1, 1),(2, 1),(3, 1),(4, 1),(5, 1)]

|| convertcardtonum [(Ace, Hearts), (Ace, Hearts), (Three, Diamonds), 
||                   (Four, Clubs)]

|| shuffle 5 [(Two, Hearts), (Three, Spades), (Four, Diamonds), 
||            (Five, Clubs), (Six, Hearts), (Seven, Hearts)] isduplicate
|| shuffle 3 [(Ace, Hearts), (Two, Hearts), (Ace, Diamonds), 
||            (Four, Clubs), (Three, Hearts)] isduplicate
|| shuffle 2 [(Ace, Hearts), (Ace, Hearts), (Three, Diamonds), 
||            (Four, Clubs)] isduplicate
