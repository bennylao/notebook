Exercise 1

The game called “Minefield” presents the user with a 10x10 grid of cells that are initially blank. Five (5) of these cells contain hidden mines. The user is invited to enter (x,y) coordinates (such that both x and y are between 1 and 10 inclusive) for cells that she wishes to visit. The user is given one point for every cell that is visited that does not contain a mine. As soon as the user visits a cell that contains a mine, or visits a cell that has already been visited, the game is over and the program prints the user’s score to the screen.

1.    You are given the following type synonym definition for the game board:

    >board == [[cell]]
    Give an algebraic type definition for the type cell.

cell ::= Empty | Mine | Visited


2.    Give the definition (including its type) of the function init_board which takes as its argument a (possibly infinite) list of (x,y) coordinates representing the positions of the mines. Your function should generate a value of type board containing 95 empty cells and 5 cells containing mines in the appropriate positions.

init_board :: [(num, num)] -> board
init_board coordlist
  = addmines_loop 5 coordlist emptyboard
    where
    emptyboard = rep 10 (rep 10 Empty)

|| addmines_loop adds the first element of the coordinate list to the current board by calling addmine; it does this n times
addmines_loop :: num -> [(num, num)] -> board -> board
addmines_loop 0 coordlist curboard = curboard
addmines_loop n [] board = error "insufficient mines"
addmines_loop n ((x,y) : rest) curboard 
  = error "coordinates out of range", if (x < 1) \/ (x > 10) \/ (y < 1) \/ (y > 10)
  = error "non-integer coordinates", if (~ (integer x)) \/ (~ (integer y))
  = addmines_loop (n-1) rest (addmine front curboard), otherwise

|| addmine adds a single mine to the board
addmine :: board -> (num, num) -> board
addmine curboard (x,y) 
  = curboard, if (selectedrow ! (y-1)) = Mine)  || ignore this coordinate if a mine is there already
  = (take (x-1) curboard) ++ [(take (y-1) selectedrow) ++ [Mine] ++ (drop y selectedrow)] ++ (drop x curboard), otherwise
    where selectedrow = curboard ! (x-1)


3.    Give the definitions (including types) of the following two functions:

    — usermove. This function takes two arguments: the board and a single (x,y) coordinate. It returns a two-tuple containing (i) a boolean according to whether the user has hit a mine or a previously visited cell, and (ii) a new board, suitably updated to indicate which cells have been visited.

    — showboard. this function takes a single argument: the board. It returns a list of characters with newlines embedded appropriately in order to display the board on the screen. Previously-visited cells should be shown as the character 'X' and unvisited cells should be shown as the space character. Mines should be shown as spaces (i.e. hidden from the user). 

usermove :: board -> (num, num) -> (bool, board)
usermove curboard (x, y) 
  = error "coordinates out of range", if (x < 1) \/ (x > 10) \/ (y < 1) \/ (y > 10)
  = error "non-integer coordinates", if (~ (integer x)) \/ (~ (integer y))
  = (True, curboard), if (((curboard ! (x-1)) ! (y-1)) = Mine) \/ (((curboard ! (x-1)) ! (y-1)) = Visited)  || hit a mine or previously visited cell - game over
  = (False, update_board curboard (x,y)), otherwise

update_board :: board -> (num, num) -> board
update_board curboard (x,y) 
  = (take (x-1) curboard) ++ [(take (y-1) selectedrow) ++ [Visited] ++ (drop y selectedrow)] ++ (drop x curboard), otherwise
    where selectedrow = curboard ! (x-1)

showboard :: board -> [char]
showboard b = lay (map (concat . (map g)) b)
              where
              g Visited = "X"
              g Empty = " "
              g Mine = " "
